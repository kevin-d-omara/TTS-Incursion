local class = require("incursion.lib.30log.class")
local HiddenZone = require("incursion.util.HiddenZone")
local Math = require("incursion.util.Math")
local PlayerColor = require("incursion.util.PlayerColor")
local Object = require("incursion.tts_extension.Object")


local PlayerSeat = class("PlayerSeat")

PlayerSeat.OCCUPIED_HAND_ZONE_X_POSITION = 20.12


--[[
<table> args:
    <string> HiddenZoneGuid
    <Array<Faction>> Factions
    <table> BidChip:
        <Array<Vector3>> Positions: Should have 6 elements, starting from Bid Chip 0 through 5.
        <Vector3> Rotation
]]
function PlayerSeat:init(args)
    self.HiddenZoneGuid = args.HiddenZoneGuid
    self.Factions = args.Factions
    self.BidChip = args.BidChip

    self.FactionsHashSet = {}
    for _,faction in ipairs(self.Factions) do
        self.FactionsHashSet[faction] = _
    end
end

function PlayerSeat:setupEverything(faction)
    if self.FactionsHashSet[faction] == nil then
        error("The provided faction <" .. tostring(faction) .. "> doesn't sit at this seat <" .. tostring(self) .. ">.")
    end

    self:_clearSeatFor(faction)

    -- Hand Zone:
    -- Only shift the X position. The rest of the transform is constant.
    local color = Player[faction.PlayerColor.Name]
    local handTransform = color.getHandTransform()
    handTransform.position.x = self.OCCUPIED_HAND_ZONE_X_POSITION
    color.setHandTransform(handTransform)

    -- Hidden Zone:
    HiddenZone.changeColor(faction.PlayerColor.Name, self.HiddenZoneGuid)

    -- Place Bid Chips:
    self:_placeBidChips(faction)

    -- Place Faction Reference Sheet:
    

    -- Set Avatar:

end

function PlayerSeat:_clearSeatFor(newFaction)
    local activeFaction = self:_getActiveFaction()
    if activeFaction == nil or activeFaction == newFaction then
        return
    end

    -- Move hand zone back to vacant position:
    -- Only shift the X position. The rest of the transform is constant.
    local color = Player[activeFaction.PlayerColor.Name]
    local handTransform = color.getHandTransform()
    handTransform.position.x = activeFaction.VacantHandZonePositionX
    color.setHandTransform(handTransform)

    -- Clear bid chips:

    -- Clear faction reference sheet:
    -- (definitely going to need some save_state here)
end

function PlayerSeat:_placeBidChips(faction)
    -- Place in order 0 through 5. Chips are a multi-state object.
    for index,position in ipairs(self.BidChip.Positions) do
        local objectStateId = index - 1
        if index == 1 then objectStateId = 10 end -- Chip 0 is state 10

        self:_placeBidChip(faction, position, objectStateId)
    end
end

function PlayerSeat:_placeBidChip(faction, position, objectStateId)
    local infiniteBag = getObjectFromGUID(faction.BidChipInfiniteBagGuid)

    local function setState(bidChip)
        Object.setState(bidChip, objectStateId)
    end

    infiniteBag.takeObject({
        position          = position,
        rotation          = self.BidChip.Rotation,
        smooth            = true,
        index             = 1, -- TODO: should this be 0?
        callback_function = setState,
    })
end

--[[
Return the faction which was most recently set up, or nil if no faction has been setup.

Note: we could save the faction into a class variable inside setupEverything(),
but then we'd need to deal with saving state:
https://api.tabletopsimulator.com/event/#onsave
]]
function PlayerSeat:_getActiveFaction()
    for _,faction in ipairs(self.Factions) do
        local color = faction.PlayerColor.Name
        local handTransform = Player[color].getHandTransform()

        if Math.floatEquals(handTransform.position.x, self.OCCUPIED_HAND_ZONE_X_POSITION) then
            return faction
        end
    end

    return nil
end

function PlayerSeat.__tostring(this)
    local factionsStr = ""
    for _,faction in ipairs(this.Factions) do
        factionsStr = factionsStr .. tostring(faction) .. ","
    end
    factionsStr = factionsStr:sub(1, -2) -- remove trailing comma

    return string.format("PlayerSeat({HiddenZoneGuid=%s,Factions=%s})", tostring(this.HiddenZoneGuid), factionsStr)
end

return PlayerSeat
