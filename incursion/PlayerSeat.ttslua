local class = require("incursion.lib.30log.class")
local Math = require("incursion.util.Math")
local PlayerColor = require("incursion.tts_api.extension.PlayerColor")
local Object = require("incursion.tts_api.extension.Object")


local PlayerSeat = class("PlayerSeat")

PlayerSeat.OCCUPIED_HAND_ZONE_X_POSITION = 20.12

-- We have to shrink the vacant hand zones, otherwise the Allied player's hand zone
-- overlaps with the default player color (white).
PlayerSeat.VACANT_HAND_ZONE_X_SCALE = 0.1
PlayerSeat.OCCUPIED_HAND_ZONE_X_SCALE = 14.07

function PlayerSeat:init(args)
    self.Factions = args.Factions
    self.ScriptingZones = args.ScriptingZones
    self.CommandPointZone = args.CommandPointZone
    self.BattleCardHand = args.BattleCardHand
    self.BidChipHiddenZone = args.BidChipHiddenZone
    self.FactionReferenceSheet = args.FactionReferenceSheet
    self.Avatar = args.Avatar

    self.FactionsHashSet = {}
    for _,faction in ipairs(self.Factions) do
        self.FactionsHashSet[faction] = _
    end

    self.State = {
        ActiveFactionReferenceSheetGuid = '',
        ActiveAvatarGuid = '',
    }
end

function PlayerSeat:onLoad(savedData)
    if savedData ~= nil then
        self.State = savedData
    end
end

function PlayerSeat:onSave()
    return self.State
end

function PlayerSeat:setupEverything(faction)
    if self.FactionsHashSet[faction] == nil then
        error("The provided faction <" .. tostring(faction) .. "> doesn't sit at this seat <" .. tostring(self) .. ">.")
    end

    local activeFaction = self:getActiveFaction()
    if activeFaction == faction then
        return
    end

    self:_clearSeatFor(activeFaction)

    self:_swapHandZone(faction, activeFaction)
    self.BidChipHiddenZone:setColor(faction.PlayerColor.Name)
    self.BidChipHiddenZone:placeBidChips(faction.InfiniteBagGuids.BidChip)
    self:_placeFactionReferenceSheet(faction)
    self:_placeAvatar(faction)
end

function PlayerSeat:_clearSeatFor(activeFaction)
    if activeFaction == nil then
        return
    end

    -- Delete previously placed items, like Bid Chips and Faction Reference Sheet:
    Object.tryDestroy(getObjectFromGUID(self.State.ActiveFactionReferenceSheetGuid))
    Object.tryDestroy(getObjectFromGUID(self.State.ActiveAvatarGuid))
    self.BidChipHiddenZone:clearZone()
end

function PlayerSeat:_swapHandZone(newfaction, activeFaction)
    -- We deliberately swap hand zones in this order and with this delay to prevent glitches.
    -- Otherwise, the cards currently in hand will teleport to the "inactive" position of the activeFaction and may even become stuck in the activeFaction's hand.
    self:_moveHandZone(newfaction, self.OCCUPIED_HAND_ZONE_X_POSITION, self.OCCUPIED_HAND_ZONE_X_SCALE)
    if activeFaction ~= nil then
        Wait.frames(function()
            self:_moveHandZone(activeFaction, activeFaction.VacantHandZonePositionX, self.VACANT_HAND_ZONE_X_SCALE)
        end, 1)
    end
end

function PlayerSeat:_moveHandZone(faction, handZoneXPosition, handZoneXScale)
    -- Only shift the X position. The rest of the transform is constant.
    local player = faction.PlayerColor:Player()
    local handTransform = player.getHandTransform()
    handTransform.position.x = handZoneXPosition
    handTransform.scale.x = handZoneXScale
    player.setHandTransform(handTransform)
end

function PlayerSeat:_placeFactionReferenceSheet(faction)
    local infiniteBag = getObjectFromGUID(faction.InfiniteBagGuids.FactionReferenceSheet)

    infiniteBag.takeObject({
        position          = self.FactionReferenceSheet.Position,
        rotation          = self.FactionReferenceSheet.Rotation,
        smooth            = false,
        index             = 1,
        callback_function = function(obj) self.State.ActiveFactionReferenceSheetGuid = obj.getGUID() end,
    })
end

function PlayerSeat:_placeAvatar(faction)
    local initialPosition = Vector(self.Avatar.Position) + Vector(faction.Avatar.PositionDelta)
    local finalPosition = initialPosition:copy():rotateOver('y', self.Avatar.YRotation)
    local finalRotation = Vector(faction.Avatar.Rotation) + Vector(0, self.Avatar.YRotation, 0)

    local infiniteBag = getObjectFromGUID(faction.Avatar.InfiniteBagGuid)
    local callback = function(obj)
        obj.setLock(true)
        obj.interactable = false
        obj.setScale(faction.Avatar.Scale)
        -- HACK: Wait 1 frame before capturing GUID because otherwise it will be duplicate w/ the other Drop Trooper player.
        Wait.frames(function() self.State.ActiveAvatarGuid = obj.getGUID() end, 1)
    end

    infiniteBag.takeObject({
        position          = finalPosition,
        rotation          = finalRotation,
        smooth            = false,
        index             = 1,
        callback_function = callback,
    })
end

--[[
Return the faction which was most recently set up, or nil if no faction has been setup.

Note: we could save the faction into a class variable inside setupEverything(),
but then we'd need to deal with saving state:
https://api.tabletopsimulator.com/event/#onsave
]]
function PlayerSeat:getActiveFaction()
    for _,faction in ipairs(self.Factions) do
        local color = faction.PlayerColor.Name
        local handTransform = Player[color].getHandTransform()

        if Math.floatEquals(handTransform.position.x, self.OCCUPIED_HAND_ZONE_X_POSITION) then
            return faction
        end
    end

    return nil
end

function PlayerSeat.__tostring(this)
    local factionsStr = ""
    for _,faction in ipairs(this.Factions) do
        factionsStr = factionsStr .. tostring(faction) .. ","
    end
    factionsStr = factionsStr:sub(1, -2) -- remove trailing comma

    return string.format("PlayerSeat({Factions=%s})", tostring(factionsStr))
end

return PlayerSeat
