local class = require("incursion.lib.30log.class")
local PlayerSeats = require("incursion.config.PlayerSeats")
local GameTable = require("incursion.GameTable")
local GameRules = require("incursion.GameRules")
local Broadcast = require("incursion.tts_api.util.Broadcast")


local Mission = class("Mission")

Mission.DEFAULT_BATTLE_CARD_DECK_INFINITE_BAG_GUID = 'd3cde6'
Mission.DEFAULT_BROADCAST_FLAVORTEXT_TINT = Color.White

Mission.DELAY_BEFORE_CALLING_POST_SETUP_CALLBACK = 0.5 -- Gives some time for the CPs to settle.
Mission.TIME_IT_TAKES_FOR_SETUP_TO_COMPLETE = 3.5 -- This includes waiting for the deck to shuffle and the CPs to stop moving.
Mission.TIME_IT_TAKES_FOR_SETUP_WITH_NO_DECK_TO_COMPLETE = Mission.TIME_IT_TAKES_FOR_SETUP_TO_COMPLETE - 1.2

--[[
Enhancements:
* Print name of mission after setup(). Optionally print fluff like "COMMANDOS... WE ARE LEAVING!"
    * See if I can set the fade time for the broadcast. Take inspiration from Spirit Island.
* If only one player in room, force them into color/seat for Solo scenarios.
* Add override to make PlayerSeat be a specific faction.
    * For example, "Let The Mecha In" always uses MI-13 for the Allies.
    * For example, "The Blitz" always uses SWD for the Axis.
    * For example, most Solo scenarios have a fixed faction.
    * Make sure to migrate any player sitting in that seat when changing it's color!
* Add override for avatar. For example, "The Blitz" should use a Bomberzombie.
]]

function Mission:init(args)
    self.MemoryBagGuid = args.MemoryBagGuid
    self.PlayerSeats = args.PlayerSeats
        -- Allies/Axis = {}
            -- RequisitionPoints
            -- NumberCommandPoints [Optional]
            -- NumberBattleCards [Optional]

    -- Optional:
    self.PostSetupCallback = args.PostSetupCallback
    self.BattleCardDeckInfiniteBagGuid = args.BattleCardDeckInfiniteBagGuid
    self.NoBattleCardDeck = args.NoBattleCardDeck
    self.BroadcastTitle = args.BroadcastTitle
    self.BroadcastFlavorText = args.BroadcastFlavorText

    -- Use this if the PostSetupCallback is not instant. For example, pulling something out of a back with smoothing enabled.
    self.BroadcastDelayAfterPostSetupCallback = args.BroadcastDelayAfterPostSetupCallback or 0.0
end

function Mission:setup(memoryBagObj)
    self:_clearTable()
    Wait.frames(function() memoryBagObj.call("buttonClick_place") end, 1)
    Wait.time(function() self:_postSetup() end, 0.5)
end

function Mission:_clearTable()
    GameTable:clearPlayArea()
    GameTable:clearBattleCards()
    for seatName,_ in pairs(self.PlayerSeats) do
        local playerSeat = PlayerSeats[seatName]
        playerSeat.CommandPointZone:clearZone()
        playerSeat.BattleCardHand:clearZone()
        playerSeat.ScriptingZones.ModelCards:clearZone()
    end
end

function Mission:_postSetup()
    self:_placeBattleCardsAndDeal()
    self:_placeCommandPoints()

    local broadcastDelay = self.TIME_IT_TAKES_FOR_SETUP_TO_COMPLETE
    if self:_zeroBattleCards() then
        broadcastDelay = self.TIME_IT_TAKES_FOR_SETUP_WITH_NO_DECK_TO_COMPLETE
    end

    if self.PostSetupCallback then
        Wait.time(function() self.PostSetupCallback() end, self.DELAY_BEFORE_CALLING_POST_SETUP_CALLBACK)
        Wait.time(function() self:_broadcastTitleAndFlavorText() end, self.BroadcastDelayAfterPostSetupCallback + broadcastDelay)
    else
        Wait.time(function() self:_broadcastTitleAndFlavorText() end, broadcastDelay)
    end
end

function Mission:_placeBattleCardsAndDeal()
    local dealCards = function(deckObj)
         for seatName,config in pairs(self.PlayerSeats) do
             local numCards = config.NumberBattleCards or GameRules.GetNumberBattleCards(config.RequisitionPoints)
             PlayerSeats[seatName].BattleCardHand:dealCards(numCards, deckObj)
         end
    end

    local shuffleThenDeal = function(battleCardDeckObj)
        Wait.frames(function() battleCardDeckObj.shuffle() end, 1)
        Wait.frames(function() dealCards(battleCardDeckObj) end, 2)
    end

    if not self.NoBattleCardDeck then
        local bagGuid = self.BattleCardDeckInfiniteBagGuid or self.DEFAULT_BATTLE_CARD_DECK_INFINITE_BAG_GUID
        GameTable:spawnBattleCards(bagGuid, shuffleThenDeal)
    end
end

function Mission:_placeCommandPoints()
    for seatName,config in pairs(self.PlayerSeats) do
        local numCommandPoints = config.NumberCommandPoints or GameRules.GetNumberCommandPoints(config.RequisitionPoints)
        PlayerSeats[seatName].CommandPointZone:setCommandPoints(numCommandPoints, false)
    end
end

function Mission:_zeroBattleCards()
    for seatName,config in pairs(self.PlayerSeats) do
        local numCards = config.NumberBattleCards or GameRules.GetNumberBattleCards(config.RequisitionPoints)
        if numCards > 0 then
            return false
        end
    end

    return true
end

function Mission:_broadcastTitleAndFlavorText()
    Wait.time(function() self:_broadcastTitle() end, 0)
    Wait.time(function() self:_broadcastFlavorText() end, Broadcast.MESSAGE_FADE_TIME)
end

function Mission:_broadcastTitle()
    if self.BroadcastTitle then
        broadcastToAll(tostring(self.BroadcastTitle), DEFAULT_BROADCAST_FLAVORTEXT_TINT)
    end
end

function Mission:_broadcastFlavorText()
    if self.BroadcastFlavorText then
        -- Broadcast in reverse order, because the most recent message goes to the top of the screen.
        for i=#self.BroadcastFlavorText,1,-1 do
            local payload = self.BroadcastFlavorText[i]
            local tint = payload.Tint or DEFAULT_BROADCAST_FLAVORTEXT_TINT
            broadcastToAll(payload.Message, tint)
        end
    end
end

return Mission
