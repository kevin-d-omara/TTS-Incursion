local class = require("incursion.lib.30log.class")
local Math = require("incursion.util.Math")


local BattleCardHand = class("BattleCardHand")

BattleCardHand.INCREMENTAL_HEIGHT_INCREASE_FOR_CARDS_IN_HAND = 0.10

function BattleCardHand:init(args)
    self.TotalWidth = args.TotalWidth
    self.CardWidth = args.CardWidth
    self.CardRotation = args.CardRotation
    self.CenterTransform = args.CenterTransform
    self.LeftToRight = args.LeftToRight
    self.ScriptingZone = args.ScriptingZone
end

function BattleCardHand:setCards(numCards, deckObj)
    self:clearZone()
    self:dealCards(numCards, deckObj)
end

function BattleCardHand:dealCards(numCards, deckObj)
    if numCards == 0 then
        return
    elseif numCards < 0 then
        error("numCards cannot be negative: "..tostring(numCards))
    end

    local seatedColor = self:_getSeatedColor()
    if seatedColor then
        deckObj.deal(numCards, seatedColor)
        return
    end

    local totalWidth = self.TotalWidth
    local cardWidth = self.CardWidth
    local centerTransform = Vector(self.CenterTransform)
    local leftToRight = Vector(self.LeftToRight)

    local allottedCardWidth = math.min(cardWidth, totalWidth/(numCards))
    local leftOffset = (numCards-1)/2 * allottedCardWidth
    local leftmostTransform = centerTransform - leftToRight:normalized() * leftOffset

    for cardNum=1,numCards do
        local transform = leftmostTransform + leftToRight:normalized() * (cardNum - 1) * allottedCardWidth
        local up = Vector(0.0, 1.0, 0.0)
        local height = self.INCREMENTAL_HEIGHT_INCREASE_FOR_CARDS_IN_HAND*cardNum
        transform:add(up * height)
        deckObj.takeObject({
            position          = transform,
            rotation          = self.CardRotation,
            smooth            = true,
            index             = 0,
        })
    end
end

function BattleCardHand:clearZone()
    self.ScriptingZone:clearZone()
end

--[[
Return the color of the player seated at the BattleCardHand's location, or nil if no player is seated.

WARNING: This only works for seats across from the table on the Z axis. It won't work for seats across the table on the X axis.
]]
function BattleCardHand:_getSeatedColor()
    local seatedPlayers = {}
    for _, player in ipairs(Player.getPlayers()) do
        if player.seated and player.getHandCount() > 0 then
            table.insert(seatedPlayers, player)
        end
    end

    for _,player in ipairs(seatedPlayers) do
        local handPosition = player.getHandTransform().position
        local centerTransform = Vector(self.CenterTransform)

        if Math.floatEquals(handPosition.x, centerTransform.x) and Math.floatEquals(handPosition.z, centerTransform.z) then
            return player.color
        end
    end

    return nil
end

return BattleCardHand
