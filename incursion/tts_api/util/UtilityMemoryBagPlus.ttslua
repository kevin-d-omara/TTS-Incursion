--::[[ Utility Memory Bag Plus ]]::--
--[[
Forked from Utility Memory Bag by Directsun:
* code version 2.5.1 / workshop change #2 (May 23 @ 10:50 am)
* https://steamcommunity.com/sharedfiles/filedetails/?id=2057376256

The Utility Memory Bag was forked from Memory Bag 2.0 by MrStump:
* workshop change #3 (July 6, 2017 @ 10:32 pm)
* https://steamcommunity.com/sharedfiles/filedetails/?id=953770080

For my own reference, I copied this file from my other project:
* https://github.com/kevin-d-omara/Heroes-System-Scripted/blob/workshop-release-partially-scripted/src/TabletopSimulator/UtilityMemoryBagPlus.ttslua
* My only change was to update the RXI JSON import to the new require() style.
--]]

--[[
Features/Enhancements:

1 - RXI json.lua
    The onLoad() and updateSave() methods are about 50% faster thanks to the RXI json.lua library, which is faster than the built-in TTS JSON library:
    https://github.com/rxi/json.lua

2 - Bag Groups
    Can now define groups of Memory Bags where only one bag from a group can have its objects placed at a time.
    The other bags automatically recall their objects when "Place" is clicked on any bag in the group.
    Set the "Config.MEMORY_GROUP.NAME" to use put this bag into a bag group.

3 - Configurable
    Offers 1-line configurations for:
    * Toggle whether to show the Setup and Move buttons.
    * Toggle whether to broadcast a message when objects are placed and recalled.

4 - Bugfixes
    * Fixed bug which disabled the "Set New" and "Remove" buttons when loading the save.
--]]

--[[
Ideas for faster JSON loading (i.e. reducing mod load time):
Try lazy loading the JSON save_state string, i.e. only decode it when is used.

local encoded_json_save_string = nil
local decoded_save_state = nil

function getSaveState()
    if decoded_save_state == nil and (encoded_json_save_string ~= "" and encoded_json_save_string ~= nil) then
        decoded_save_state = rxi_json.decode(encoded_json_save_string)
    end

    return decoded_save_state
end

function onLoad(json_save_state)
    if json_save_state ~= "" and json_save_state ~= nil then
        encoded_json_save_string = json_save_state
    end
end

function onSave()
    if decoded_save_state ~= nil then
        return rxi_json.encode(decoded_save_state)
    elif encoded_json_save_string ~= "" and encoded_json_save_string ~= nil
        return encoded_json_save_string
    end
end
]]


--[[ User Configuration ]]------------------------------------------------------
Config = {}
Config.MEMORY_GROUP = {}

-- This value determines which "group" this bag is in, and must be identical for all bags in the same group.
-- Set this to 'nil' in order to not have the bag in a group (identical behavior to original Utility Memory Bag).
Config.MEMORY_GROUP.NAME = nil
-- Config.MEMORY_GROUP.NAME = 'DEFAULT_GROUP_NAME'

-- This determines how many frames to wait before actually placing objects onto the table when the "Place" button is clicked.
-- This gives the other bags time to recall their objects.
-- The delay ONLY occurs if other bags have objects out.
Config.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30

-- If true, will broadcast a message to all players when the objects are placed or recalled.
-- This is the default behavior of Utility Memory Bag.
Config.BROADCAST_WHEN_OBJECTS_PLACED_OR_RECALLED = false

-- If true, the Setup and Move buttons will be visible.
-- This is the default behavior of Utility Memory Bag.
-- You should turn this off before publishing your mod, to keep things simple for your users.
Config.ENABLE_SETUP_BUTTONS = true

-- Any GUIDs in this table will be ignored during "Setup" (i.e. no clickable button will be spawned above it).
-- Use this if your game room has objects which you never want to save into a MemoryBag, but their buttons are easy to accidentally click!
-- Ex: Config.IGNORE_THESE_GUIDS_DURING_SETUP = {'123abc', '456xyz'}
Config.IGNORE_THESE_GUIDS_DURING_SETUP = {}
--------------------------------------------------------------------------------



--[[ Memory Bag Groups ]]-------------------------------------------------------

-- Click "recall" on all the other bags in this group.
function recallOtherBagsInGroup()
    if Config.MEMORY_GROUP.NAME == nil then
        return
    end

    for bagGuid,_ in pairs(MemoryBagGroups:getGroup(Config.MEMORY_GROUP.NAME)) do
        if bagGuid ~= self.getGUID() then
            bag = getObjectFromGUID(bagGuid)
            bag.call('buttonClick_recall')
        end
    end
end

-- Return true if any other bags in this memory group have any objects on the table.
function anyOtherBagsInGroupHaveObjectsOnTable()
    if Config.MEMORY_GROUP.NAME == nil then
        return false
    end

    for bagGuid,_ in pairs(MemoryBagGroups:getGroup(Config.MEMORY_GROUP.NAME)) do
        if bagGuid ~= self.getGUID() then
            local bag = getObjectFromGUID(bagGuid)
            local state = bag.call('areAnyOfMyObjectsPlaced')
            if state then return true end
        end
    end

    return false
end

-- Return true if at least one object from this memory bag is out on the table.
function areAnyOfMyObjectsPlaced()
    for guid, entry in pairs(memoryList) do
        local obj = getObjectFromGUID(guid)
        if obj ~= nil then
            return true
        end
    end
    return false
end

-- Provides access to the Global dictionary of Memory Bag Groups.
MemoryBagGroups = {
    MEMORY_BAG_GROUPS = '_memoryBagGroups',
}

-- Create a Global variable for the bag groups, if it doesn't already exist.
function MemoryBagGroups:initializeGlobal()
    if self:_getGroups() == nil then
        self:_setGroups({})
    end
end

-- Return a single bag group, which is a dictionary mapping [guid -> MemoryBagState].
function MemoryBagGroups:getGroup(groupName)
    self:_assertGroupExists(groupName)
    return self:_getGroups()[groupName]
end

-- Registers a bag in a group. Creates a new group if one doesn't exist.
function MemoryBagGroups:registerBagInGroup(groupName, bagGuid)
    self:_tryCreateNewGroup(groupName)
    local groups = self:_getGroups()
    groups[groupName][bagGuid] = {}
    self:_setGroups(groups)
end

-- Return all bag groups.
function MemoryBagGroups:_getGroups()
    return Global.getTable(self.MEMORY_BAG_GROUPS)
end

-- Override the entire bag groups with a new value.
function MemoryBagGroups:_setGroups(newTable)
    Global.setTable(self.MEMORY_BAG_GROUPS, newTable)
end

-- Throw an error if there isn't a group named 'groupName'.
function MemoryBagGroups:_assertGroupExists(groupName)
    local groups = self:_getGroups()
    if groups[groupName] == nil then
        error("There is no MemoryBagGroup with the groupName: '"..tostring(groupName))
    end
end

-- Create a new group named 'groupName', if one doesn't already exist.
function MemoryBagGroups:_tryCreateNewGroup(groupName)
    local groups = self:_getGroups()
    if groups[groupName] == nil then
        groups[groupName] = {}
        self:_setGroups(groups)
    end
end

function MemoryBagGroups.onLoad()
    MemoryBagGroups:initializeGlobal()
    if Config.MEMORY_GROUP.NAME ~= nil then
        MemoryBagGroups:registerBagInGroup(Config.MEMORY_GROUP.NAME, self.getGUID())
    end
end

-- Gives users a chance to change the configuration values from outside of this script, such as when #including this script.
Wait.frames(MemoryBagGroups.onLoad, 2)
--------------------------------------------------------------------------------



--[[ RXI json.lua ]]------------------------------------------------------------
rxi_json = require("incursion.lib.rxi_json.json")
--------------------------------------------------------------------------------




--------------------------------------------------------------------------------
-- Original Utility Memory Bag code by Directsun:
-- https://steamcommunity.com/sharedfiles/filedetails/?id=2057376256
--
-- w/ minor tweaks to support Memory Bag Groups and RXI json.lua.
--------------------------------------------------------------------------------

function updateSave()
    local data_to_save = {["ml"]=memoryList}
    -- saved_data = JSON.encode(data_to_save)  -- original - built-in JSON library
    saved_data = rxi_json.encode(data_to_save)
    self.script_state = saved_data
end

function combineMemoryFromBagsWithin()
  local bagObjList = self.getObjects()
  for _, bagObj in ipairs(bagObjList) do
    local data = bagObj.lua_script_state
      if data ~= nil then
        local j = JSON.decode(data)
        if j ~= nil and j.ml ~= nil then
          for guid, entry in pairs(j.ml) do
            memoryList[guid] = entry
          end
        end
      end
    end
end

function updateMemoryWithMoves()
    memoryList = memoryListBackup
    --get the first transposed object's coordinates
    local obj = getObjectFromGUID(moveGuid)

    -- p1 is where needs to go, p2 is where it was
    local refObjPos = memoryList[moveGuid].pos
    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)
    local movedRotation = obj.getRotation()
    for guid, entry in pairs(memoryList) do
        memoryList[guid].pos.x = entry.pos.x - deltaPos.x
        memoryList[guid].pos.y = entry.pos.y - deltaPos.y
        memoryList[guid].pos.z = entry.pos.z - deltaPos.z
        -- memoryList[guid].rot.x = movedRotation.x
        -- memoryList[guid].rot.y = movedRotation.y
        -- memoryList[guid].rot.z = movedRotation.z
    end

    --theList[obj.getGUID()] = {
    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},
    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},
    --    lock=obj.getLock()
    --}
    moveList = {}
end

function onload(saved_data)
    fresh = true
    if saved_data ~= "" then
        -- local loaded_data = JSON.decode(saved_data)  -- original - built-in JSON library
        loaded_data = rxi_json.decode(saved_data)
        --Set up information off of loaded_data
        memoryList = loaded_data.ml
    else
        --Set up information for if there is no saved saved data
        memoryList = {}
    end

    moveList = {}
    moveGuid = nil

    if next(memoryList) == nil then
        createSetupButton()
    else
        fresh = false
        createMemoryActionButtons()
    end
end


--Beginning Setup


--Make setup button
function createSetupButton()
    self.createButton({
        label="Setup", click_function="buttonClick_setup", function_owner=self,
        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,
        font_size=250, color={0,0,0}, font_color={1,1,1}
    })
end

--Triggered by Transpose button
function buttonClick_transpose()
    moveGuid = nil
    broadcastToAll("Select one object and move it- all objects will move relative to the new location", {0.75, 0.75, 1})
    memoryListBackup = duplicateTable(memoryList)
    memoryList = {}
    moveList = {}
    self.clearButtons()
    createButtonsOnAllObjects(true)
    createSetupActionButtons(true)
end

--Triggered by setup button,
function buttonClick_setup()
    memoryListBackup = duplicateTable(memoryList)
    memoryList = {}
    self.clearButtons()
    createButtonsOnAllObjects(false)
    createSetupActionButtons(false)
end

function getAllObjectsInMemory()
  local objTable = {}
  local curObj = {}

  for guid in pairs(memoryListBackup) do
    curObj = getObjectFromGUID(guid)
    table.insert(objTable, curObj)
  end

  return objTable
  -- return getAllObjects()
end

--Creates selection buttons on objects
function createButtonsOnAllObjects(move)
    local howManyButtons = 0

    local objsToHaveButtons = {}
    if move == true then
      objsToHaveButtons = getAllObjectsInMemory()
    else
      objsToHaveButtons = getAllObjects()
    end

    -- Create a HashSet of GUIDs to ignore:
    local ignoreGuids = {}
    for _,guid in ipairs(Config.IGNORE_THESE_GUIDS_DURING_SETUP) do
        ignoreGuids[guid] = ""
    end

    for _, obj in ipairs(objsToHaveButtons) do
        if (obj ~= self) and (ignoreGuids[obj.getGUID()] == nil) then
            local dummyIndex = howManyButtons
            --On a normal bag, the button positions aren't the same size as the bag.
            globalScaleFactor = 1.25 * 1/self.getScale().x
            --Super sweet math to set button positions
            local selfPos = self.getPosition()
            local objPos = obj.getPosition()
            local deltaPos = findOffsetDistance(selfPos, objPos, obj)
            local objPos = rotateLocalCoordinates(deltaPos, self)
            objPos.x = -objPos.x * globalScaleFactor
            objPos.y = objPos.y * globalScaleFactor
            objPos.z = objPos.z * globalScaleFactor
            --Offset rotation of bag
            local rot = self.getRotation()
            rot.y = -rot.y + 180
            --Create function
            local funcName = "selectButton_" .. howManyButtons
            local func = function() buttonClick_selection(dummyIndex, obj, move) end
            local color = {0.75,0.25,0.25,0.6}
            local colorMove = {0,0,1,0.6}
            if move == true then
              color = colorMove
            end
            self.setVar(funcName, func)
            self.createButton({
                click_function=funcName, function_owner=self,
                position=objPos, rotation=rot, height=1000, width=1000,
                color=color,
            })
            howManyButtons = howManyButtons + 1
        end
    end
end

--Creates submit and cancel buttons
function createSetupActionButtons(move)
    self.createButton({
        label="Cancel", click_function="buttonClick_cancel", function_owner=self,
        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,
        font_size=250, color={0,0,0}, font_color={1,1,1}
    })

    self.createButton({
        label="Submit", click_function="buttonClick_submit", function_owner=self,
        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,
        font_size=250, color={0,0,0}, font_color={1,1,1}
    })

    if move == false then
      self.createButton({
          label="Add", click_function="buttonClick_add", function_owner=self,
          position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,
          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}
      })

        if fresh == false then
            self.createButton({
                label="Set New", click_function="buttonClick_setNew", function_owner=self,
                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,
                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}
            })
            self.createButton({
                label="Remove", click_function="buttonClick_remove", function_owner=self,
                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,
                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}
            })
        end
    end

    self.createButton({
        label="Reset", click_function="buttonClick_reset", function_owner=self,
        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,
        font_size=250, color={0,0,0}, font_color={1,1,1}
    })
end


--During Setup


--Checks or unchecks buttons
function buttonClick_selection(index, obj, move)
    local colorMove = {0,0,1,0.6}
    local color = {0,1,0,0.6}

    previousGuid = selectedGuid
    selectedGuid = obj.getGUID()

    theList = memoryList
    if move == true then
       theList = moveList
       if previousGuid ~= nil and previousGuid ~= selectedGuid then
         local prevObj = getObjectFromGUID(previousGuid)
         prevObj.highlightOff()
         self.editButton({index=previousIndex, color=colorMove})
         theList[previousGuid] = nil
       end
       previousIndex = index
    end

    if theList[selectedGuid] == nil then
        self.editButton({index=index, color=color})
        --Adding pos/rot to memory table
        local pos, rot = obj.getPosition(), obj.getRotation()
        --I need to add it like this or it won't save due to indexing issue
        theList[obj.getGUID()] = {
            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},
            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},
            lock=obj.getLock()
        }
        obj.highlightOn({0,1,0})
    else
      color = {0.75,0.25,0.25,0.6}
      if move == true then
        color = colorMove
      end
        self.editButton({index=index, color=color})
        theList[obj.getGUID()] = nil
        obj.highlightOff()
    end
end

--Cancels selection process
function buttonClick_cancel()
    memoryList = memoryListBackup
    moveList = {}
    self.clearButtons()
    if next(memoryList) == nil then
        createSetupButton()
    else
        createMemoryActionButtons()
    end
    removeAllHighlights()
    broadcastToAll("Selection Canceled", {1,1,1})
    moveGuid = nil
end

--Saves selections
function buttonClick_submit()
    fresh = false
    if next(moveList) ~= nil then
        for guid in pairs(moveList) do
            moveGuid = guid
        end
        if memoryListBackup[moveGuid] == nil then
            broadcastToAll("Item selected for moving is not already in memory", {1, 0.25, 0.25})
        else
            broadcastToAll("Moving all items in memory relative to new objects position!", {0.75, 0.75, 1})
            self.clearButtons()
            createMemoryActionButtons()
            local count = 0
            for guid in pairs(moveList) do
                moveGuid = guid
                count = count + 1
                local obj = getObjectFromGUID(guid)
                if obj ~= nil then obj.highlightOff() end
            end
            updateMemoryWithMoves()
            updateSave()
            buttonClick_place()
        end
    elseif next(memoryList) == nil and moveGuid == nil then
      memoryList = memoryListBackup
      broadcastToAll("No selections made.", {0.75, 0.25, 0.25})
    end
    combineMemoryFromBagsWithin()
    self.clearButtons()
    createMemoryActionButtons()
    local count = 0
    for guid in pairs(memoryList) do
        count = count + 1
        local obj = getObjectFromGUID(guid)
        if obj ~= nil then obj.highlightOff() end
    end
    broadcastToAll(count.." Objects Saved", {1,1,1})
    updateSave()
    moveGuid = nil
end

function combineTables(first_table, second_table)
  for k,v in pairs(second_table) do first_table[k] = v end
end

function buttonClick_add()
    fresh = false
    combineTables(memoryList, memoryListBackup)
    broadcastToAll("Adding internal bags and selections to existing memory", {0.25, 0.75, 0.25})
    combineMemoryFromBagsWithin()
    self.clearButtons()
    createMemoryActionButtons()
    local count = 0
    for guid in pairs(memoryList) do
        count = count + 1
        local obj = getObjectFromGUID(guid)
        if obj ~= nil then obj.highlightOff() end
    end
    broadcastToAll(count.." Objects Saved", {1,1,1})
    updateSave()
end

function buttonClick_remove()
        broadcastToAll("Removing Selected Entries From Memory", {1.0, 0.25, 0.25})
        self.clearButtons()
        createMemoryActionButtons()
        local count = 0
        for guid in pairs(memoryList) do
            count = count + 1
            memoryListBackup[guid] = nil
            local obj = getObjectFromGUID(guid)
            if obj ~= nil then obj.highlightOff() end
        end
        broadcastToAll(count.." Objects Removed", {1,1,1})
        memoryList = memoryListBackup
        updateSave()
end

function buttonClick_setNew()
    broadcastToAll("Setting new position relative to items in memory", {0.75, 0.75, 1})
    self.clearButtons()
    createMemoryActionButtons()
    local count = 0
    for _, obj in ipairs(getAllObjects()) do
        guid = obj.guid
        if memoryListBackup[guid] ~= nil then
            count = count + 1
            memoryListBackup[guid].pos = obj.getPosition()
            memoryListBackup[guid].rot = obj.getRotation()
            memoryListBackup[guid].lock = obj.getLock()
        end
    end
    broadcastToAll(count.." Objects Saved", {1,1,1})
    memoryList = memoryListBackup
    updateSave()
end

--Resets bag to starting status
function buttonClick_reset()
    fresh = true
    memoryList = {}
    self.clearButtons()
    createSetupButton()
    removeAllHighlights()
    broadcastToAll("Tool Reset", {1,1,1})
    updateSave()
end


--After Setup


--Creates recall and place buttons
function createMemoryActionButtons()
    self.createButton({
        label="Place", click_function="buttonClick_place", function_owner=self,
        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,
        font_size=250, color={0,0,0}, font_color={1,1,1}
    })
    self.createButton({
        label="Recall", click_function="buttonClick_recall", function_owner=self,
        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,
        font_size=250, color={0,0,0}, font_color={1,1,1}
    })
    if Config.ENABLE_SETUP_BUTTONS then
        self.createButton({
            label="Setup", click_function="buttonClick_setup", function_owner=self,
            position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,
            font_size=250, color={0,0,0}, font_color={1,1,1}
        })
        self.createButton({
          label="Move", click_function="buttonClick_transpose", function_owner=self,
          position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,
          font_size=250, color={0,0,0}, font_color={0.75,0.75,1}
        })
    end
end

--Sends objects from bag/table to their saved position/rotation
function buttonClick_place()
    if anyOtherBagsInGroupHaveObjectsOnTable() then
        recallOtherBagsInGroup()
        Wait.frames(_placeObjects, Config.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)
    else
        _placeObjects()
    end
end

function _placeObjects()
    local bagObjList = self.getObjects()
    for guid, entry in pairs(memoryList) do
        local obj = getObjectFromGUID(guid)
        --If obj is out on the table, move it to the saved pos/rot
        if obj ~= nil then
            obj.setPositionSmooth(entry.pos)
            obj.setRotationSmooth(entry.rot)
            obj.setLock(entry.lock)
        else
            --If obj is inside of the bag
            for _, bagObj in ipairs(bagObjList) do
                if bagObj.guid == guid then
                    local item = self.takeObject({
                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false
                    })
                    item.setLock(entry.lock)
                    break
                end
            end
        end
    end
    if Config.BROADCAST_WHEN_OBJECTS_PLACED_OR_RECALLED then
        broadcastToAll("Objects Placed", {1,1,1})
    end
end

--Recalls objects to bag from table
function buttonClick_recall()
    for guid, entry in pairs(memoryList) do
        local obj = getObjectFromGUID(guid)
        if obj ~= nil then self.putObject(obj) end
    end
    if Config.BROADCAST_WHEN_OBJECTS_PLACED_OR_RECALLED then
        broadcastToAll("Objects Recalled", {1,1,1})
    end
end


--Utility functions


--Find delta (difference) between 2 x/y/z coordinates
function findOffsetDistance(p1, p2, obj)
    local yOffset = 0
    if obj ~= nil then
        local bounds = obj.getBounds()
        yOffset = (bounds.size.y - bounds.offset.y)
    end
    local deltaPos = {}
    deltaPos.x = (p2.x-p1.x)
    deltaPos.y = (p2.y-p1.y) + yOffset
    deltaPos.z = (p2.z-p1.z)
    return deltaPos
end

--Used to rotate a set of coordinates by an angle
function rotateLocalCoordinates(desiredPos, obj)
	local objPos, objRot = obj.getPosition(), obj.getRotation()
    local angle = math.rad(objRot.y)
	local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)
	local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)
	--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}
    return {x=x, y=desiredPos.y, z=z}
end

function rotateMyCoordinates(desiredPos, obj)
	local angle = math.rad(obj.getRotation().y)
    local x = desiredPos.x * math.sin(angle)
	local z = desiredPos.z * math.cos(angle)
    return {x=x, y=desiredPos.y, z=z}
end

--Coroutine delay, in seconds
function wait(time)
    local start = os.time()
    repeat coroutine.yield(0) until os.time() > start + time
end

--Duplicates a table (needed to prevent it making reference to the same objects)
function duplicateTable(oldTable)
    local newTable = {}
    for k, v in pairs(oldTable) do
        newTable[k] = v
    end
    return newTable
end

--Moves scripted highlight from all objects
function removeAllHighlights()
    for _, obj in ipairs(getAllObjects()) do
        obj.highlightOff()
    end
end

--Round number (num) to the Nth decimal (dec)
function round(num, dec)
  local mult = 10^(dec or 0)
  return math.floor(num * mult + 0.5) / mult
end
